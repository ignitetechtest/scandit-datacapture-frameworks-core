import { DefaultSerializeable } from "../serializable";
import { DataCaptureContext } from "../context";
import { MarginsWithUnit, PointWithUnit, Anchor, Point, Quadrilateral, Rect } from "../common";
import { FocusGesture, LogoStyle, ZoomGesture } from "../camera";
import { Control } from "./Control";
import { DataCaptureOverlay } from "./DataCaptureOverlay";
import { DataCaptureViewListener } from "./DataCaptureViewListener";
export interface DataCaptureView {
}
export declare class BaseDataCaptureView extends DefaultSerializeable {
    private _context;
    viewComponent: DataCaptureView;
    get context(): DataCaptureContext | null;
    set context(context: DataCaptureContext | null);
    private get coreDefaults();
    private _scanAreaMargins;
    get scanAreaMargins(): MarginsWithUnit;
    set scanAreaMargins(newValue: MarginsWithUnit);
    private _pointOfInterest;
    get pointOfInterest(): PointWithUnit;
    set pointOfInterest(newValue: PointWithUnit);
    private _logoAnchor;
    get logoAnchor(): Anchor;
    set logoAnchor(newValue: Anchor);
    private _logoOffset;
    get logoOffset(): PointWithUnit;
    set logoOffset(newValue: PointWithUnit);
    private _focusGesture;
    get focusGesture(): FocusGesture | null;
    set focusGesture(newValue: FocusGesture | null);
    private _zoomGesture;
    get zoomGesture(): ZoomGesture | null;
    set zoomGesture(newValue: ZoomGesture | null);
    private _logoStyle;
    get logoStyle(): LogoStyle;
    set logoStyle(newValue: LogoStyle);
    overlays: DataCaptureOverlay[];
    private controls;
    private controller;
    listeners: DataCaptureViewListener[];
    private get privateContext();
    static forContext(context: DataCaptureContext | null): BaseDataCaptureView;
    constructor();
    addOverlay(overlay: DataCaptureOverlay): void;
    removeOverlay(overlay: DataCaptureOverlay): void;
    addListener(listener: DataCaptureViewListener): void;
    removeListener(listener: DataCaptureViewListener): void;
    viewPointForFramePoint(point: Point): Promise<Point>;
    viewQuadrilateralForFrameQuadrilateral(quadrilateral: Quadrilateral): Promise<Quadrilateral>;
    addControl(control: Control): void;
    addControlWithAnchorAndOffset(control: Control, anchor: Anchor, offset: PointWithUnit): void;
    removeControl(control: Control): void;
    controlUpdated(): void;
    dispose(): void;
    setFrame(frame: Rect, isUnderContent?: boolean): Promise<void>;
    setPositionAndSize(top: number, left: number, width: number, height: number, shouldBeUnderWebView: boolean): Promise<void>;
    show(): Promise<void>;
    hide(): Promise<void>;
}
